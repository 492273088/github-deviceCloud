<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gxl.dcloud.mapper.LogInfoMapper" >
  <resultMap id="BaseResultMap" type="com.gxl.dcloud.pojo.LogEnty" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="module" property="module" jdbcType="VARCHAR" />
    <result column="method" property="method" jdbcType="VARCHAR" />
    <result column="response_data" property="responseData" jdbcType="BIGINT" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="data" property="data" jdbcType="BIGINT" />
    <result column="commite" property="commite" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, module, method, response_data, ip, data, commite
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from log_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from log_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.gxl.dcloud.pojo.LogEnty" >
    insert into log_info (id, user_id, module, 
      method, response_data, ip, 
      data, commite)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{module,jdbcType=VARCHAR}, 
      #{method,jdbcType=VARCHAR}, #{responseData,jdbcType=BIGINT}, #{ip,jdbcType=VARCHAR}, 
      #{data,jdbcType=BIGINT}, #{commite,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.gxl.dcloud.pojo.LogEnty" >
    insert into log_info
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="module != null" >
        module,
      </if>
      <if test="method != null" >
        method,
      </if>
      <if test="responseData != null" >
        response_data,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="data != null" >
        data,
      </if>
      <if test="commite != null" >
        commite,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="module != null" >
        #{module,jdbcType=VARCHAR},
      </if>
      <if test="method != null" >
        #{method,jdbcType=VARCHAR},
      </if>
      <if test="responseData != null" >
        #{responseData,jdbcType=BIGINT},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="data != null" >
        #{data,jdbcType=BIGINT},
      </if>
      <if test="commite != null" >
        #{commite,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.gxl.dcloud.pojo.LogEnty" >
    update log_info
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="module != null" >
        module = #{module,jdbcType=VARCHAR},
      </if>
      <if test="method != null" >
        method = #{method,jdbcType=VARCHAR},
      </if>
      <if test="responseData != null" >
        response_data = #{responseData,jdbcType=BIGINT},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="data != null" >
        data = #{data,jdbcType=BIGINT},
      </if>
      <if test="commite != null" >
        commite = #{commite,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gxl.dcloud.pojo.LogEnty" >
    update log_info
    set user_id = #{userId,jdbcType=INTEGER},
      module = #{module,jdbcType=VARCHAR},
      method = #{method,jdbcType=VARCHAR},
      response_data = #{responseData,jdbcType=BIGINT},
      ip = #{ip,jdbcType=VARCHAR},
      data = #{data,jdbcType=BIGINT},
      commite = #{commite,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>